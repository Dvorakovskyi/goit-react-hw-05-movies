{"version":3,"file":"static/js/57.e879031e.chunk.js","mappings":"uNAAMA,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cAAe,+N,0FCFNC,EAAYC,EAAAA,GAAAA,IAAH,2DAKTC,EAAkBD,EAAAA,GAAAA,GAAH,kFAMfE,EAAkBF,EAAAA,GAAAA,GAAH,4HAMfG,EAAmBH,EAAAA,GAAAA,EAAH,+C,SC8C7B,EAnDa,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAgCA,OA9BAC,EAAAA,EAAAA,YAAU,WFXW,IAACC,EEYpBF,GAAY,IFZQE,EEcZR,EFbFS,MAAM,sCAAD,OAAuCD,EAAvC,2BAAoElB,GAC1EoB,MAAK,SAAAC,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,QAG7B,OAAOH,EAASI,MACnB,KEOFL,MAAK,SAAAM,GACJ,IAAMC,EAASD,EAAKE,KAAKC,KACvB,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAS9B,MAAO,CACLH,QAAAA,EACAI,QARmB,OAAjBH,EACK,UAjBA,mCAiBA,OAAqBA,GAElBI,EAMVH,KAAAA,EACAC,UAAAA,EAEH,IAGHnB,EAAYa,EACb,IACAS,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,QAAtB,IACXC,QAAQzB,GAAY,GACxB,GAAE,CAACN,KAGF,2BACGK,IAAY,SAAC2B,EAAA,QAAD,KACb,SAACnC,EAAD,UACGM,EAASgB,KAAI,gBAAGC,EAAH,EAAGA,QAASI,EAAZ,EAAYA,QAASF,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACZ,UAACzB,EAAD,YACE,SAACH,EAAD,CAAWsC,IAAKT,EAASU,IAAKZ,KAC9B,SAACvB,EAAD,UAAmBuB,KACnB,UAACvB,EAAD,WAAkB,cAAYwB,OAHVH,EADV,QAUrB,C,4DC7CD,UAfe,WACb,OACE,SAAC,KAAD,CACEe,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,UACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,GAGd,C,sBChBc,SAASC,EAAuBC,EAASC,GAKtD,OAJKA,IACHA,EAAMD,EAAQE,MAAM,IAGfC,OAAOC,OAAOD,OAAOE,iBAAiBL,EAAS,CACpDC,IAAK,CACHK,MAAOH,OAAOC,OAAOH,MAG3B,C","sources":["Api/cast-api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Loader.jsx","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["const options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNTE3NmZjNDE2MzI4ZTk1ZGY5ZWFlMWE5MmExOTZkYSIsInN1YiI6IjY0NzQ5YmNmZGQ3MzFiMmQ3OGJhM2VhZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.yI8oxgZajMgWItmBQF3P_YhUKz9fcoHMEmZxHaInDx0'\n  }\n};\n\nexport const getCast = (id) => {\n   return fetch(`https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`, options)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(response.status)\n            }\n        \n            return response.json();\n        })\n}","import styled from 'styled-components';\n\nexport const StyledImg = styled.img`\n  width: 200px;\n  height: 300px;\n`;\n\nexport const StyledActorList = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n`;\n\nexport const StyledActorItem = styled.li`\n    width: 200px;\n    list-style: none;\n    box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;\n`;\n\nexport const StyledActorDescr = styled.p`\n    margin-left: 5px;\n`;","import React, { useEffect, useState } from 'react';\nimport { getCast } from 'Api/cast-api';\nimport { useParams } from 'react-router-dom';\nimport defaultImage from '../../images/actor.jpg';\nimport Loader from 'components/Loader/Loader';\nimport {\n  StyledImg,\n  StyledActorItem,\n  StyledActorList,\n  StyledActorDescr,\n} from './Cast.styled';\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w200';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castInfo, setCastInfo] = useState([]);\n  const [isLoader, setIsLoader] = useState(false);\n\n  useEffect(() => {\n    setIsLoader(true);\n\n    getCast(movieId)\n      .then(data => {\n        const actors = data.cast.map(\n          ({ cast_id, profile_path, name, character }) => {\n            let imgPath = '';\n\n            if (profile_path !== null) {\n              imgPath = `${BASE_IMG_URL}${profile_path}`;\n            } else {\n              imgPath = defaultImage;\n            }\n\n            return {\n              cast_id,\n              imgPath,\n              name,\n              character,\n            };\n          }\n        );\n\n        setCastInfo(actors);\n      })\n      .catch(error => console.log(error.message))\n      .finally(setIsLoader(false));\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoader && <Loader />}\n      <StyledActorList>\n        {castInfo.map(({ cast_id, imgPath, name, character }) => (\n          <StyledActorItem key={cast_id}>\n            <StyledImg src={imgPath} alt={name} />\n            <StyledActorDescr>{name}</StyledActorDescr>\n            <StyledActorDescr>Character: {character}</StyledActorDescr>\n          </StyledActorItem>\n        ))}\n      </StyledActorList>\n    </div>\n  );\n};\n\nexport default Cast;\n","import React from 'react';\nimport { ThreeDots } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <ThreeDots\n      height=\"80\"\n      width=\"80\"\n      radius=\"9\"\n      color=\"#d12b19\"\n      ariaLabel=\"three-dots-loading\"\n      wrapperStyle={{}}\n      wrapperClassName=\"\"\n      visible={true}\n    />\n  );\n};\n\nexport default Loader;\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["options","method","headers","accept","Authorization","StyledImg","styled","StyledActorList","StyledActorItem","StyledActorDescr","movieId","useParams","useState","castInfo","setCastInfo","isLoader","setIsLoader","useEffect","id","fetch","then","response","ok","Error","status","json","data","actors","cast","map","cast_id","profile_path","name","character","imgPath","defaultImage","catch","error","console","log","message","finally","Loader","src","alt","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value"],"sourceRoot":""}