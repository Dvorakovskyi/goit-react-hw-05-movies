{"version":3,"file":"static/js/814.4135a6c7.chunk.js","mappings":"gLAkBA,UAfe,WACb,OACE,SAAC,KAAD,CACEA,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,UACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,GAGd,C,mHCbYC,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,4JAWVE,EAAaF,EAAAA,GAAAA,GAAH,gD,sFCMvB,EAhBqB,SAAC,GAAmC,IAAjCG,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACvC,OACE,SAAC,IAAD,WACE,SAAC,IAAD,CAAYC,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMH,GAAhD,SACGF,GAASC,KAFGF,EAMpB,E,UCeD,EAtBkB,SAAC,GAAwB,IAAtBO,EAAqB,EAArBA,KAAMJ,EAAe,EAAfA,SACzB,OACE,SAAC,KAAD,WACE,SAAC,KAAD,UACGI,EAAKC,KAAI,gBAAGR,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAd,OACR,SAACO,EAAD,CAEET,GAAIA,EACJC,MAAOA,EACPC,KAAMA,EACNC,SAAUA,GAJLH,EAFC,OAYjB,C,qICnBYU,EAAgBb,EAAAA,GAAAA,QAAH,yHAObc,EAAcd,EAAAA,GAAAA,GAAH,wFAMXe,EAAaf,EAAAA,GAAAA,GAAH,4C,sGCfjBgB,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cAAe,+N,gDC8BnB,EAzBiB,WACf,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,WAAS,GAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACMrB,GAAWsB,EAAAA,EAAAA,MAWjB,OATAC,EAAAA,EAAAA,YAAU,WACRF,GAAY,GDPLG,MAAM,+DAAgEd,GACxEe,MAAK,SAAAC,GACF,IAAKA,EAASC,GAChB,MAAM,IAAIC,MAAMF,EAASG,QAGvB,OAAOH,EAASI,MACzB,ICGIL,MAAK,gBAAGM,EAAH,EAAGA,QAAH,OAAiBd,EAASc,EAA1B,IACLC,OAAM,SAAAd,GAAK,OAAIC,EAASD,EAAMe,QAAnB,IACXC,QAAQb,GAAY,GACxB,GAAE,KAGD,gCACGH,GAASiB,EAAAA,OAAAA,QAAe,gDACxBf,IAAY,SAACgB,EAAA,QAAD,KACb,SAAC,KAAD,UAAa,oBACb,SAACC,EAAA,EAAD,CAAWjC,KAAMY,EAAOhB,SAAUA,MAGvC,C","sources":["components/Loader/Loader.jsx","components/TrendingList/MovieItem/MovieItem.styled.js","components/TrendingList/MovieItem/MovieItem.jsx","components/TrendingList/MovieList.jsx","components/TrendingList/MovieList.styled.js","Api/get-trending-api.js","pages/HomePage.jsx"],"sourcesContent":["import React from 'react';\nimport { ThreeDots } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <ThreeDots\n      height=\"80\"\n      width=\"80\"\n      radius=\"9\"\n      color=\"#d12b19\"\n      ariaLabel=\"three-dots-loading\"\n      wrapperStyle={{}}\n      wrapperClassName=\"\"\n      visible={true}\n    />\n  );\n};\n\nexport default Loader;\n","import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const StyledLink = styled(Link)`\n    font-size: 16px;\n    text-decoration: none;\n    color: black;\n\n    &:hover,\n    &:focus {\n        color: #d12b19;\n    }\n`;\n\nexport const StyledItem = styled.li`\n    margin-bottom: 3px;\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledLink, StyledItem } from './MovieItem.styled';\n\nconst TrendingItem = ({ id, title, name, location }) => {\n  return (\n    <StyledItem key={id}>\n      <StyledLink to={`/movies/${id}`} state={{ from: location }}>\n        {title || name}\n      </StyledLink>\n    </StyledItem>\n  );\n};\n\nTrendingItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string,\n  name: PropTypes.string,\n};\n\nexport default TrendingItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieItem from './MovieItem/MovieItem';\nimport { StyledSection, StyledList } from './MovieList.styled';\n\nconst MovieList = ({ data, location }) => {\n  return (\n    <StyledSection>\n      <StyledList>\n        {data.map(({ id, title, name }) => (\n          <MovieItem\n            key={id}\n            id={id}\n            title={title}\n            name={name}\n            location={location}\n          />\n        ))}\n      </StyledList>\n    </StyledSection>\n  );\n};\n\nMovieList.propTypes = {\n  data: PropTypes.array.isRequired,\n};\n\nexport default MovieList;\n","import styled from \"styled-components\";\n\nexport const StyledSection = styled.section`\n    min-width: 320px;\n    padding-left: 20px;\n    padding-right: 20px;\n    margin-top: 10px;\n`;\n\nexport const StyledTitle = styled.h2`\n    margin: 0;\n    margin-top: 10px;\n    padding-left: 20px;\n`;\n\nexport const StyledList = styled.ul`\n    margin: 10px 0;\n`;","const options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNTE3NmZjNDE2MzI4ZTk1ZGY5ZWFlMWE5MmExOTZkYSIsInN1YiI6IjY0NzQ5YmNmZGQ3MzFiMmQ3OGJhM2VhZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.yI8oxgZajMgWItmBQF3P_YhUKz9fcoHMEmZxHaInDx0'\n  }\n};;\n\nexport const fetchTrending = () => {\n    return fetch('https://api.themoviedb.org/3/trending/all/day?language=en-US', options)\n        .then(response => {\n            if (!response.ok) {\n          throw new Error(response.status)\n            }\n            \n            return response.json();\n  })\n}","import React from 'react';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useState, useEffect } from 'react';\nimport { fetchTrending } from 'Api/get-trending-api';\nimport MovieList from 'components/TrendingList/MovieList';\nimport Loader from 'components/Loader/Loader';\nimport { useLocation } from 'react-router-dom';\nimport { StyledTitle } from 'components/TrendingList/MovieList.styled';\n\nconst HomePage = () => {\n  const [movie, setMovie] = useState([]);\n  const [error, setError] = useState('');\n  const [isLoader, setIsLoader] = useState(false);\n  const location = useLocation();\n\n  useEffect(() => {\n    setIsLoader(true);\n\n    fetchTrending()\n      .then(({ results }) => setMovie(results))\n      .catch(error => setError(error.message))\n      .finally(setIsLoader(false));\n  }, []);\n\n  return (\n    <>\n      {error && Notify.failure('Something went wrong, please try again later')}\n      {isLoader && <Loader />}\n      <StyledTitle>Trending today</StyledTitle>\n      <MovieList data={movie} location={location}/>\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":["height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","StyledLink","styled","Link","StyledItem","id","title","name","location","to","state","from","data","map","MovieItem","StyledSection","StyledTitle","StyledList","options","method","headers","accept","Authorization","useState","movie","setMovie","error","setError","isLoader","setIsLoader","useLocation","useEffect","fetch","then","response","ok","Error","status","json","results","catch","message","finally","Notify","Loader","MovieList"],"sourceRoot":""}